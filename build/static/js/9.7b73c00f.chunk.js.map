{"version":3,"sources":["myPages/article/ArticleContent.js","myPages/article/LinkToArticles.js","myPages/article/ViewSelector.js","myPages/Article.js","myComponents/markdownRenderer/EmbeddedMusic.js","myComponents/markdownRenderer/MarkdownImage.js","myComponents/markdownRenderer/SpecialText.js","myComponents/markdownRenderer/Tracklist.js","myComponents/MarkdownRenderer.js","../node_modules/fscreen/lib/index.js"],"names":["ArticleContent","data","musicOnly","publicationDate","title","mainImage","categoryKey","category","body","categoryBy","tabTitle","WideLogo","className","containerHeight","logoWidth","ArticleHeader","image","href","path","name","MarkdownRenderer","md","LinkToArticles","nextArticle","urlPath","previousArticle","ViewSelector","open","setMusicOnly","toggleSelector","sc","onClick","Article","actions","contentRef","React","createRef","state","selectorOpen","requestFullscreen","contentElem","current","fscreen","fullscreenEnabled","setState","renderMain","navSlideClass","props","routeMatch","match","previewData","articlePath","params","ref","CMSItemLoader","description","itemPath","article","renderOnData","articleRelated","required","push","alt","img","this","getActions","MenuWrapper","render","Component","EmbeddedMusic","iframeWrapperRef","aspectPercentage","trackNumber","saveAspectRatio","getTrackNumber","prevProps","iframe","children","width","height","test","extraClass","showTrackNumber","style","paddingBottom","MarkdownImage","src","SpecialText","align","size","toLowerCase","Tracklist","tracksStr","tracks","JSON","parse","map","i","startTime","artist","trackName","key","trimmedTime","trim","length","formatTime","options","overrides","component","Object","defineProperty","exports","value","fullscreenElement","exitFullscreen","fullscreenchange","fullscreenerror","webkit","moz","ms","document","window","vendor","keys","default","element","requestFullscreenFunction","bind","addEventListener","type","handler","removeEventListener","Boolean","val"],"mappings":"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","file":"static/js/9.7b73c00f.chunk.js","sourcesContent":["/** This renders the actual content of our article, into the Article page */\nimport React from 'react'\nimport { Titled } from 'react-titled'\n\nimport ArticleHeader from 'myComponents/ArticleHeader'\nimport MarkdownRenderer from 'myComponents/MarkdownRenderer'\nimport WideLogo from 'myComponents/WideLogo'\nimport { categoryBy } from 'myUtils/constants'\nimport './ArticleContent.css'\n\nconst ArticleContent = ({ data, musicOnly }) => {\n  const { publicationDate, title, mainImage, category: categoryKey, body } = data\n  const category = categoryKey && categoryBy('key', categoryKey)\n\n  return (\n    <div>\n      <Titled title={tabTitle => `${title} | ${tabTitle}`} />\n\n      <WideLogo className='u-mobileOnly' containerHeight='55px' logoWidth='280px' />\n\n      <ArticleHeader image={mainImage} title={title}>\n        <div>\n          {category &&\n            <a className='tng-ArticleContent-category' href={`/category/${category.path}`}>\n              {category.name}\n            </a>\n          }\n        </div>\n        <div className='tng-ArticleContent-publishDate'>published on {publicationDate}</div>\n      </ArticleHeader>\n\n      <div className='tng-ArticleContent-text'>\n        <MarkdownRenderer md={body || ''} musicOnly={musicOnly} />\n      </div>\n    </div>\n  )\n}\n\nexport default ArticleContent\n","/** The section in the Article page that has links to neighboring articles */\nimport React from 'react'\n\nimport './LinkToArticles.css'\n\nconst LinkToArticles = ({ data }) => (\n  <div className='tng-LinkToArticles'>\n    {data.nextArticle &&\n      <div className='tng-LinkToArticles-section'>\n        <div className='tng-LinkToArticles-label'>next post</div>\n        <div>\n          <a className='tng-LinkToArticles-link' href={data.nextArticle.urlPath}>\n            {data.nextArticle.title}\n          </a>\n        </div>\n      </div>\n    }\n    {data.previousArticle &&\n      <div className='tng-LinkToArticles-section'>\n        <div className='tng-LinkToArticles-label'>previous post</div>\n        <div>\n          <a className='tng-LinkToArticles-link' href={data.previousArticle.urlPath}>\n            {data.previousArticle.title}\n          </a>\n        </div>\n      </div>\n    }\n  </div>\n)\n\nexport default LinkToArticles\n","/** Render an opaque view that allows you to change the view mode of the article */\nimport React from 'react'\n\nimport sc from 'myUtils/suitClass'\n\nimport './ViewSelector.css'\n\nconst ViewSelector = ({ musicOnly, open, setMusicOnly, toggleSelector }) => (\n  <div className={sc('tng-ViewSelector', open && ' is-visible')}>\n    <div>\n      <div className='tng-ViewSelector-title'>select view mode</div>\n      <div>\n        <button\n          className={sc('tng-ViewSelector-viewMode', !musicOnly && 'is-selected')}\n          onClick={() => setMusicOnly(false)}\n        >\n          Text + Music\n        </button>\n      </div>\n      <div>\n        <button\n          className={sc('tng-ViewSelector-viewMode', musicOnly && 'is-selected')}\n          onClick={() => setMusicOnly(true)}\n        >\n          Music only\n        </button>\n      </div>\n      <div>\n        <button className='tng-ViewSelector-closeBtn' onClick={toggleSelector}>\n          <strong>x close</strong>\n        </button>\n      </div>\n    </div>\n  </div>\n)\n\nexport default ViewSelector\n","/**\n * This is the page that is displayed when viewing an article\n */\nimport React, { Component } from 'react'\nimport fscreen from 'fscreen'\n\nimport ArticleContent from './article/ArticleContent'\nimport CMSItemLoader from 'myComponents/CMSItemLoader'\nimport LinkToArticles from './article/LinkToArticles'\nimport MenuWrapper from 'myComponents/MenuWrapper'\nimport ViewSelector from './article/ViewSelector'\nimport sc from 'myUtils/suitClass'\n\nimport './Article.css'\n\nclass Article extends Component {\n  actions = null\n\n  contentRef = React.createRef()\n\n  state = {\n    musicOnly: false,\n    selectorOpen: false\n  }\n\n  /** Return the actions that can be done on the article page */\n  getActions () {\n    const actions = []\n    if (fscreen.fullscreenEnabled) {\n      actions.push({\n        alt: 'full screen',\n        className: 'u-mobileOnly',\n        img: 'fullScreen',\n        onClick: this.requestFullscreen\n      })\n    }\n\n    actions.push({ alt: 'toggle view mode', img: 'eye', onClick: this.toggleSelector })\n    return actions\n  }\n\n  /** Request to open the article in fullscreen */\n  requestFullscreen = () => {\n    const contentElem = this.contentRef.current\n    if (fscreen.fullscreenEnabled) {\n      fscreen.requestFullscreen(contentElem)\n    }\n  }\n\n  /** Set whether Music Only mode is on, to change what content is displayed */\n  setMusicOnly = (musicOnly) => {\n    this.setState({ musicOnly, selectorOpen: false })\n  }\n\n  /** Change whether the selector is open or closed */\n  toggleSelector = () => {\n    this.setState({ selectorOpen: !this.state.selectorOpen })\n  }\n\n  /**\n   * Render all content wrapped by menus/navigation.\n   * navSlideClass is a CSS that will make content slide when the mobile nav slides in.\n   */\n  renderMain = ({ navSlideClass }) => {\n    const { match: routeMatch, previewData } = this.props\n    const { musicOnly, selectorOpen } = this.state\n\n    let articlePath = ''\n    if (!previewData) {\n      articlePath = routeMatch.params.articlePath\n    }\n\n    return (\n      <div className={sc('tng-Article', navSlideClass)} ref={this.contentRef}>\n        { /* \"Music Only\" Indicator */ }\n        <div className={sc('tng-Article-indicator', musicOnly && 'is-visible', navSlideClass)}>\n          music only\n        </div>\n\n        { /* Article Content */ }\n        <div className={sc('tng-Article-content', musicOnly && 'is-musicOnly')}>\n          <CMSItemLoader\n            description='article content'\n            itemPath={`articles/${articlePath}.json`}\n            previewData={previewData && previewData.article}\n            renderOnData={data =>\n              <ArticleContent data={data} musicOnly={musicOnly} />\n            }\n          />\n        </div>\n\n        { /* Links To Other Articles */ }\n        <div className='tng-Article-linksToArticles'>\n          <CMSItemLoader\n            description='links to other articles'\n            itemPath={`generated/article-related/${articlePath}.json`}\n            previewData={previewData && previewData.articleRelated}\n            renderOnData={data =>\n              <LinkToArticles data={data} />\n            }\n            required={false}\n          />\n        </div>\n\n        { /* View Selector */ }\n        <ViewSelector\n          musicOnly={musicOnly}\n          open={selectorOpen}\n          setMusicOnly={this.setMusicOnly}\n          toggleSelector={this.toggleSelector}\n        />\n      </div>\n    )\n  }\n\n  render () {\n    this.actions = this.actions || this.getActions()\n    return <MenuWrapper actions={this.actions} render={this.renderMain} />\n  }\n}\n\nexport default Article\n","/**\n * This is a component that renders a iframe, that should have music, within our Markdown content.\n * It will have a track number that will only show up with Music Only mode active.\n */\nimport React, { Component } from 'react'\n\nimport './EmbeddedMusic.css'\n\nclass EmbeddedMusic extends Component {\n  iframeWrapperRef = React.createRef()\n\n  state = {\n    aspectPercentage: '',\n    trackNumber: ''\n  }\n\n  componentDidMount () {\n    this.saveAspectRatio()\n    this.setState({ trackNumber: this.props.getTrackNumber() })\n  }\n\n  componentDidUpdate (prevProps) {\n    if (this.props.iframe !== prevProps.iframe) {\n      this.saveAspectRatio()\n    }\n  }\n\n  /**\n   * Get the aspect percentages of all provided iframes, unless they have a dimension that is not\n   * defined in pixels (e.g. Soundcloud iframe code sets width as 100%). These aspect percentages\n   * can be used to make the iframe responsive\n   */\n  saveAspectRatio () {\n    let aspectPercentage = ''\n    const iframe = this.iframeWrapperRef.current.children[0]\n    if (iframe && iframe.width && iframe.height) {\n      const isPixelNumbers = /^\\d+$/.test(`${iframe.width}${iframe.height}`)\n      if (isPixelNumbers) {\n        aspectPercentage = `${iframe.height * 100 / iframe.width}%`\n      }\n    }\n\n    this.setState({ aspectPercentage })\n  }\n\n  render () {\n    const { aspectPercentage, trackNumber } = this.state\n    const { extraClass, showTrackNumber, title, iframe } = this.props\n\n    return (\n      <div className={`tng-EmbeddedMusic ${extraClass}`}>\n        <div className='tng-EmbeddedMusic-title'>\n          {showTrackNumber &&\n            <span>{trackNumber}. </span>\n          }\n          {title}\n        </div>\n        <div className={aspectPercentage ? 'tng-EmbeddedMusic-fluidFrameWrapper' : ''}\n          ref={this.iframeWrapperRef}\n          style={aspectPercentage ? { paddingBottom: aspectPercentage } : {}}>\n          { iframe }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default EmbeddedMusic\n","/** A component to render an image that was provided in the Markdown of our article content */\nimport React from 'react'\n\nimport './MarkdownImage.css'\n\n// Note: top-level element cannot be a div, because images are wrapped with <p> elements\nconst MarkdownImage = ({ alt, src, title }) => (\n  <img alt={alt} className='tng-MarkdownImage' src={src} title={title} />\n)\n\nexport default MarkdownImage\n","import React from 'react'\n\nimport sc from 'myUtils/suitClass'\nimport './SpecialText.css'\n\nconst SpecialText = ({ align, size }) => (\n  <div\n    className={sc(\n      'tng-SpecialText',\n      align && `tng-SpecialText--${align.toLowerCase()}`,\n      size && `tng-SpecialText--${size.toLowerCase()}`\n    )}\n  />\n)\n\nexport default SpecialText\n","/**\n * Tracklist is a component that renders the tracklist of a music mix.\n */\nimport React from 'react'\n\nimport './Tracklist.css'\n\nconst Tracklist = ({ tracksStr }) => {\n  const tracks = tracksStr ? JSON.parse(tracksStr) : []\n\n  return (\n    <section className='tng-Tracklist'>\n      <h2 className='tng-Tracklist-title'>Tracklist</h2>\n      <ul className='tng-Tracklist-list'>\n        {tracks.map(({ startTime, artist, trackName }, i) =>\n          <li className='tng-Tracklist-item' key={i}>\n            <div className='tng-Tracklist-time'>{formatTime(startTime)} </div>\n            <div>\n              <div className='tng-Tracklist-artist'>{artist}</div>\n              <div className='tng-Tracklist-name'>{trackName}</div>\n            </div>\n          </li>\n        )}\n      </ul>\n    </section>\n  )\n}\n\n/** formatTime will format the track time so it has a mm:ss or hh:mm:ss display */\nfunction formatTime (startTime) {\n  const trimmedTime = startTime.trim()\n\n  if (trimmedTime.length === 0) {\n    return '00:00'\n  }\n\n  const timeFormat = /^[0-5]?[0-9]:[0-5][0-9](:[0-5][0-9])?$/\n  if (!trimmedTime.match(timeFormat)) {\n    return '??:??'\n  }\n\n  if (trimmedTime.length === 4 || trimmedTime.length === 7) {\n    // trimmedTime is m:ss or h:mm:ss\n    return `0${trimmedTime}`\n  }\n\n  return trimmedTime\n}\n\nexport default Tracklist\n","import Markdown from 'markdown-to-jsx'\nimport React from 'react'\n\nimport EmbeddedMusic from './markdownRenderer/EmbeddedMusic'\nimport MarkdownImage from './markdownRenderer/MarkdownImage'\nimport SpecialText from './markdownRenderer/SpecialText'\nimport Tracklist from './markdownRenderer/Tracklist'\nimport sc from 'myUtils/suitClass'\nimport './MarkdownRenderer.css'\n\nconst MarkdownRenderer = ({ md, musicOnly = false }) => {\n  let trackNumber = 1\n\n  return (\n    <Markdown\n      className={sc('tng-MarkdownRenderer', musicOnly && 'is-showingMusicOnly')}\n      children={md}\n      options={{\n        overrides: {\n          EmbeddedMusic: {\n            component: EmbeddedMusic,\n            props: {\n              extraClass: 'tng-MarkdownRenderer-music',\n              getTrackNumber: () => trackNumber++,\n              showTrackNumber: musicOnly\n            }\n          },\n          SpecialText,\n          Tracklist,\n          img: {\n            component: MarkdownImage\n          }\n        }\n      }}\n    />\n  )\n}\n\nexport default MarkdownRenderer\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar key = {\n  fullscreenEnabled: 0,\n  fullscreenElement: 1,\n  requestFullscreen: 2,\n  exitFullscreen: 3,\n  fullscreenchange: 4,\n  fullscreenerror: 5\n};\nvar webkit = ['webkitFullscreenEnabled', 'webkitFullscreenElement', 'webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitfullscreenchange', 'webkitfullscreenerror'];\nvar moz = ['mozFullScreenEnabled', 'mozFullScreenElement', 'mozRequestFullScreen', 'mozCancelFullScreen', 'mozfullscreenchange', 'mozfullscreenerror'];\nvar ms = ['msFullscreenEnabled', 'msFullscreenElement', 'msRequestFullscreen', 'msExitFullscreen', 'MSFullscreenChange', 'MSFullscreenError']; // so it doesn't throw if no window or document\n\nvar document = typeof window !== 'undefined' && typeof window.document !== 'undefined' ? window.document : {};\nvar vendor = 'fullscreenEnabled' in document && Object.keys(key) || webkit[0] in document && webkit || moz[0] in document && moz || ms[0] in document && ms || [];\nexports.default = {\n  requestFullscreen: function requestFullscreen(element) {\n    return element[vendor[key.requestFullscreen]]();\n  },\n  requestFullscreenFunction: function requestFullscreenFunction(element) {\n    return element[vendor[key.requestFullscreen]];\n  },\n\n  get exitFullscreen() {\n    return document[vendor[key.exitFullscreen]].bind(document);\n  },\n\n  addEventListener: function addEventListener(type, handler, options) {\n    return document.addEventListener(vendor[key[type]], handler, options);\n  },\n  removeEventListener: function removeEventListener(type, handler, options) {\n    return document.removeEventListener(vendor[key[type]], handler, options);\n  },\n\n  get fullscreenEnabled() {\n    return Boolean(document[vendor[key.fullscreenEnabled]]);\n  },\n\n  set fullscreenEnabled(val) {},\n\n  get fullscreenElement() {\n    return document[vendor[key.fullscreenElement]];\n  },\n\n  set fullscreenElement(val) {},\n\n  get onfullscreenchange() {\n    return document[('on' + vendor[key.fullscreenchange]).toLowerCase()];\n  },\n\n  set onfullscreenchange(handler) {\n    return document[('on' + vendor[key.fullscreenchange]).toLowerCase()] = handler;\n  },\n\n  get onfullscreenerror() {\n    return document[('on' + vendor[key.fullscreenerror]).toLowerCase()];\n  },\n\n  set onfullscreenerror(handler) {\n    return document[('on' + vendor[key.fullscreenerror]).toLowerCase()] = handler;\n  }\n\n};"],"sourceRoot":""}